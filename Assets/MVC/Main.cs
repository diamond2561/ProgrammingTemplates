using System.Collections;
using System.Collections.Generic;
using UnityEngine;

//шаблон проектирования MVC (Model-View-Controller)
//     Когда такой подход стоит применять?
//Такой стиль разделения ответственностей полезен:

//Когда нужно отделить логику от визуального представления — например, вы хотите менять внешний вид объекта без изменения логики.
//Для тестирования и расширяемости — если вы хотите легко заменить или протестировать логику без привязки к конкретному GameObject.
//При создании MVP/MVVM/чистых архитектур — это шаг к более строго организованной структуре проекта.
//Для многократного использования кода — например, можно переиспользовать Controller с разными View.

public class Main : MonoBehaviour
{
    // Поле сериализовано, чтобы мы могли привязать префаб View в редакторе Unity.
    [SerializeField] private View _view;

    // Контроллер, управляющий логикой.
    private Controller _controller;

    // Вызывается при инициализации.
    private void Awake()
    {
        // Создаём контроллер, передавая ему ссылку на View.
        _controller = new Controller(_view);
    }

    // Вызывается каждый кадр.
    private void Update()
    {
        // Передаём обновления в контроллер.
        _controller.OnUpdate();
    }
}