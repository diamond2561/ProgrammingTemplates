using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Playables;

// Основные недостатки статических классов
// Нельзя наследовать - Статические классы не поддерживают наследование. Это ограничивает гибкость.
// Не может реализовывать интерфейсы - В C# статический класс не может реализовывать интерфейсы. Это мешает использовать их в системах, опирающихся на полиморфизм.
// Нет жизненного цикла - Статические классы не имеют Awake(), Start(), Update() и т.д., что делает их менее удобными в Unity.
// Сложно управлять временем жизни - Статические данные живут до конца работы приложения. Может привести к утечкам памяти или ошибкам между сценами.
// Трудно тестировать - Статические классы создают глобальное состояние, что затрудняет юнит-тестирование и использование DI (Dependency Injection).
// Нарушают принципы ООП - Глобальные переменные нарушают инкапсуляцию и усложняют отладку.

// Преимущества статических классов
// Простота использования - Доступ из любого места без создания экземпляра: GameData.Score++
// Производительность - Нет накладных расходов на создание объектов.
// Глобальная доступность - Полезно для хранения данных между сценами (например, сохранённый прогресс).

// Примеры синглтонов - AudioSystem, LocalizationManager, ...

public class Singletone : MonoBehaviour
{
    public static Singletone Instance;

    public int Value;

    private void Awake()
    {
        if (Instance == null)
        {
            Instance = this;
        }

        DontDestroyOnLoad(Instance);
    }
}
